/*:
 [–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)

 # –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –∫–∞—Å–∞—é—â–∏–µ—Å—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

 ## –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è üëªüëª (Dynamic casts)

 –£—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É ([SE-0143](https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md "Conditional conformances")) –±—ã–ª–∏ –∑–∞–≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é Swift 4.1. –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ÅThe final piece of the proposal, –∑–∞–ø—Ä–æ—Å —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ—Ç–≤—Ç–µ—Ç–≤–∏–π –≤ runtime, "–ø—Ä–∏–∑–µ–º–ª–∏–ª–∞—Å—å" –≤ Swift 4.2. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–∏–ø—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `is` –∏–ª–∏ `as?`), –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—É, —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —É–¥–∞–≤–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ —É—Å–ª–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.

 –ü—Ä–∏–º–µ—Ä:
 */
func isEncodable(_ value: Any) -> Bool {
    return value is Encodable
}

// –≠—Ç–æ –≤–µ—Ä–Ω—É–ª–æ –±—ã false –≤ Swift 4.1
let encodableArray = [1, 2, 3]
isEncodable(encodableArray)

// –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
struct NonEncodable {}
let nonEncodableArray = [NonEncodable(), NonEncodable()]
assert(isEncodable(nonEncodableArray) == false)

/*:
 ## –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö (extensions)

 –ù–µ–±–æ–ª—å—à–æ–µ, –Ω–æ –≤–∞–∂–Ω–æ–µ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–æ–∞–Ω–∏–µ –∫ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º—ã–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º –ø—Ä–æ—Ç–æ–∫–æ–ª—É, —Ç–∞–∫–æ–µ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º `Equatable` –∏ `Hashable` –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤ [SE-0185](https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md "Synthesizing Equatable and Hashable conformance").

 –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ, —á—Ç–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞). –≠—Ç–æ –±–æ–ª—å—à–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–Ω—Ç–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º `Equatable`, `Hashable`, `Encodable`, –∏ `Decodable`.

 –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏–∑ [What‚Äôs New in Swift session at WWDC 2018](https://developer.apple.com/videos/play/wwdc2018/401/). –ú—ã –º–æ–∂–µ–º –∑–∞—Å—Ç–∞–≤–∏—Ç—å `Either` —É—Å–ª–æ–≤–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º `Equatable` –∏ `Hashable`:
 */
enum Either<Left, Right> {
    case left(Left)
    case right(Right)
}

// –ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
extension Either: Equatable where Left: Equatable, Right: Equatable {}
extension Either: Hashable where Left: Hashable, Right: Hashable {}

Either<Int, String>.left(42) == Either<Int, String>.left(42)

/*:
 [–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)
 */
