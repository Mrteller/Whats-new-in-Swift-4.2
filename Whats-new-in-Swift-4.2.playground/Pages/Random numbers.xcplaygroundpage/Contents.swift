/*:
 [–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)

 # –°–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞

 –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –±—ã–ª–∞ —Å–ª–µ–≥–∫–∞ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–∞ –≤ Swift, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–∞–º (a) –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞—Ç—å C APIs –∏ (b) –Ω–µ –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–≥–æ –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ API –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.

 [SE-0202](https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md "Random Unification") –¥–æ–±–∞–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ —Å—Ç–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É.

 ## –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

 –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –º–µ—Ç–æ–¥ `random(in:)`, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ):
 */
Int.random(in: 1...1000)
UInt8.random(in: .min ... .max)
Double.random(in: 0..<1)

/*:
–≠—Ç–æ—Ç API –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–µ—Ä–µ–≥–∞–µ—Ç –≤–∞—Å –æ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç–∞–Ω–µ–Ω–Ω—ã—Ö  –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª [—Å–º–µ—â–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é] (https://www.quora.com/What-is-modulo-bias).

 `Bool.random` —ç—Ç–æ —Ç–æ–∂–µ –≤–µ—â—å:
 */
func coinToss(count tossCount: Int) -> (heads: Int, tails: Int) {
    var tally = (heads: 0, tails: 0)
    for _ in 0..<tossCount {
        let isHeads = Bool.random()
        if isHeads {
            tally.heads += 1
        } else {
            tally.tails += 1
        }
    }
    return tally
}

let (heads, tails) = coinToss(count: 100)
print("100 –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–π –º–æ–Ω–µ—Ç—ã ‚Äî –æ—Ä—ë–ª: \(heads), —Ä–µ—à–∫–∞: \(tails)")

/*:
 ## –°–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (`Collection`)

 –ö–æ–ª–ª–µ–∫—Ü–∏–∏ (`Collections`) –ø–æ–ª—É—á–∞—é—Ç –º–µ—Ç–æ–¥ `randomElement` (–∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç optional –µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞, —Ç–∞–∫–∂–µ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç `min` and `max`):
 */
let emotions = "üòÄüòÇüòäüòçü§™üòéüò©üò≠üò°"
let randomEmotion = emotions.randomElement()!

/*:
 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `shuffled`, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å `Sequence` –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é:
 */
let numbers = 1...10
let shuffled = numbers.shuffled()

/*:
 –ï—Å—Ç—å –∏ –∏–∑–º–µ–Ω—è—é—â–∏–π (mutating) –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `shuffle`. –û–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö, —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º `MutableCollection` –∏ `RandomAccessCollection`:
 */
var mutableNumbers = Array(numbers)
// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ
mutableNumbers.shuffle()

/*:
 ## –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

 –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é `Random.default`, –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤.

 If you have special requirements, you can implement your own random number generator by adopting the `RandomNumberGenerator` protocol. All APIs for generating random values provide an overload that allows users to pass in their preferred random number generator:
 */
/// A dummy random number generator that just mimics `Random.default`.
struct MyRandomNumberGenerator: RandomNumberGenerator {
    var base = Random.default
    mutating func next() -> UInt64 {
        return base.next()
    }
}

var customRNG = MyRandomNumberGenerator()
Int.random(in: 0...100, using: &customRNG)

/*:
 ## Extending your own types

 You can provide a random data API for your own types by following the same pattern:
 */
enum Suit: String, CaseIterable {
    case diamonds = "‚ô¶"
    case clubs = "‚ô£"
    case hearts = "‚ô•"
    case spades = "‚ô†"

    static func random<T: RandomNumberGenerator>(using generator: inout T) -> Suit {
        // Using CaseIterable for the implementation
        return allCases.randomElement(using: &generator)!

    }

    static func random() -> Suit {
        return Suit.random(using: &Random.default)
    }
}

let randomSuit = Suit.random()
randomSuit.rawValue

/*:
 [–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ](Table%20of%20contents) ‚Ä¢ [–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@previous) ‚Ä¢ [–°–ª–µ–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞](@next)
 */
